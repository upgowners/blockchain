PRACTICAL NO. 4
A1] Withdrawal Pattern, Restricted Access.

pragma solidity ^0.5.0; contract Test
{
    address public richest; uint public mostSent;
    mapping (address => uint) pendingWithdrawals; constructor() public payable {
    richest = msg.sender; mostSent = msg.value;
}
function becomeRichest() public payable returns (bool) 
{
     if (msg.value > mostSent) 
     {
        pendingWithdrawals[richest] += msg.value; richest = msg.sender;
        mostSent = msg.value;
        return true; 
    }
    else { return false;
    }
}
function withdraw() public 
{
    uint amount = pendingWithdrawals[msg.sender]; pendingWithdrawals[msg.sender] = 0; msg.sender.transfer(amount);
}
}

A2] Restricted Access (Error)

pragma solidity ^0.5.0; 
contract Test
{
    address public owner = msg.sender; 
    uint public creationTime = now;
    modifier onlyBy(address _account) 
    { 
        require(msg.sender == _account, "Sender not authorized."); 
    }
    function changeOwner(address _newOwner) public onlyBy(owner) { owner = _newOwner; }
    modifier onlyAfter(uint _time) 
    { 
        require(now >= _time,"Function called too early.");
    }
    function disown() public onlyBy(owner) onlyAfter(creationTime + 6 weeks) { delete owner;}
    modifier costs(uint _amount) 
    { 
        require(msg.value >= _amount,"Not enough Ether provided.");
        if (msg.value > _amount) msg.sender.transfer(msg.value - _amount);
    }
    function forceOwnerChange(address _newOwner) public payable costs(200 ether) 
    {
        owner = _newOwner;
        if (uint(owner) & 0 == 1) 
        return;
    }
}


PRACTICAL NO. 4
C] Libraries, Assembly, Events, Error handling.

1) Libraries

pragma solidity ^0.5.0;
library Search 
{
    function indexOf(uint[] storage self, uint value) public view returns (uint) 
    {
        for (uint i = 0; i < self.length; i++)
        if (self[i] == value) return i;
        return uint(-1);
    } 
}
contract Test 
{ 
    uint[] data; uint value; uint index;
    constructor() public 
    {
        data.push(6); data.push(7); data.push(8); data.push(9); data.push(10); 
    }
    function isValuePresent() external 
    {
        value = 1;
//search if value is present in the array using Library function
        index = Search.indexOf(data, value); 
    }
    function getresult() 
    public view returns(uint)
    {   
        return index; 
    }
}

2) Assembly

pragma solidity ^0.5.0;
library Sum 
{
    function sumUsingInlineAssembly(uint[] memory _data) public pure returns (uint o_sum) 
    {
        for (uint i = 0; i < _data.length; ++i) 
        {
            assembly { o_sum := add(o_sum, mload(add(add(_data, 0x20), mul(i, 0x20)))) }
        }
    }
}
contract Test 
{ 
    uint[] data;
    constructor() public 
    {
        data.push(1); data.push(2); data.push(3); data.push(4); data.push(5); 
    }
    function sum() external view returns(uint)
    {
        return Sum.sumUsingInlineAssembly(data); 
    }
}


3) Events


pragma solidity ^0.4.21;
// Creating a contract
contract eventExample   
{ 
    uint256 public value = 0; // Declaring state variables
    event Increment(address owner); // Declaring an event
// Defining a function for logging event
    function getValue(uint _a, uint _b) public 
    {
        emit Increment(msg.sender);
        value = _a + _b; 
    }
}

4) Error Handlings

pragma solidity ^0.5.0;

contract requireStatement 
{
    function checkInput(uint8 _input) public view returns(string memory)
    {
        require(_input >= 0, "invalid uint");
        require(_input <= 255, "invalid uint8");
        return "Input is Uint8"; 
    }
// Defining function to use require statement
    function Odd(uint _input) public view returns(bool)
    {
        require(_input % 2 != 0);
        return true; 
    }
}


5)  Assert Statement


pragma solidity ^0.5.0;
contract assertStatement 
{
    bool result; 
    function checkOverflow(uint8 _num1, uint8 _num2) public 
    {
        uint8 sum = _num1 + _num2;
        assert(sum<=255);
        result = true; 
    }

    function getResult() public view returns(string memory)
    {
        if(result == true)
        {
            return "No Overflow"; 
        }
        else
        {
            return "Overflow exist"; 
        }
    }
}


6)Revert Statement

// Solidity program to demonstrate revert statement
pragma solidity ^0.5.0;
// Creating a contract
contract revertStatement 
{
    function checkOverflow(uint _num1, uint _num2) public view returns(string memory, uint) 
    {
        uint sum = _num1 + _num2;
        if(sum < 0 || sum > 255)
        {
            revert(" Overflow Exist"); }
        else
        {
            return ("No Overflow", sum); 
        }
    }
}
