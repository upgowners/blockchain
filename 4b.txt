Prac 4b - Contracts, Inheritance, Constructors, Abstract Contracts, Interfaces.

#Contracts

// Calling function from external contract
pragma solidity ^0.5.0;
contract C {
uint private data; //private state variable
uint public info; //public state variable
//constructor
constructor() public { info = 10; }
//private function
function increment(uint a) private pure returns(uint) { return a + 1; }
//public function
function updateData(uint a) public { data = a; }
function getData() public view returns(uint) { return data; }
function compute(uint a, uint b) internal pure returns (uint) { return a + b; } }
//Derived Contract
contract E is C {
uint private result;
C private c;
constructor() public {
c = new C(); }
function getComputedResult() public {
result = compute(3, 5); }
function getResult() public view returns(uint) { return result; }
function getData() public view returns(uint) { return c.info(); } }

# Inheritance

// Solidity program to demonstrate Single Inheritance
pragma solidity >=0.4.22 <0.6.0;
// Defining contract
contract parent{
uint internal sum; // Declaring internal state variable
// Defining external function to set value of internal state variable sum
function setValue() external {
uint a = 20; uint b = 20; sum = a + b; }}
// Defining child contract
contract child is parent{
// Defining external function to return value of internal state variable sum
function getValue() external view returns(uint) {
return sum; }}
// Defining calling contract
contract caller {
// Creating child contract object
child cc = new child();
// Defining function to call setValue and getValue functions
function testInheritance() public {
cc.setValue(); }
function result() public view returns(uint ){
return cc.getValue(); }}

#Constructors

pragma solidity ^0.5.0;
contract Base {
uint data;
constructor(uint _data) public {
data = _data; }
function getresult()public view returns(uint){
return data; } }
contract Derived is Base (5) {
constructor() public {} }

#Abstract Contracts

pragma solidity ^0.5.0;
contract Calculator {
function getResult() public view returns(uint); }
contract Test is Calculator { function getResult() public view returns(uint) {
uint a = 5; uint b = 4; uint result = a + b; return result; }}

#Interfaces

pragma solidity ^0.5.0;
interface Calculator 
{ 
    function getResult() external view returns(uint);
}
contract Test is Calculator 
{ 
    constructor() public {}
    function getResult() external view returns(uint)
    { 
        uint a = 5;
        uint b = 3; 
        uint result = a + b;
        return result;
    }
}